@import com.gu.janus.model.{JanusData, Permission}

@(janusData: JanusData, allPermissions: Set[Permission])

janus {
    @janusData.permissionsRepo.map { repoUrl =>
        permissionsRepo = "@repoUrl"
    }

    accounts = [
        @for(account <- janusData.accounts){
            { name = "@account.name", key = "@account.authConfigKey" },
        }
    ]

    support {
        supportAccess = [
            @for(permission <- janusData.support.supportAccess){
                @permissionReference(permission),
            }
        ]

        rota = [
            @for((startTime, (user1, user2)) <- janusData.support.rota){
                {
                    startTime = "@startTime"
                    supporting = [ "@user1", "@user2" ]
                },
            }
        ]

        period = @janusData.support.supportPeriod.getSeconds
    }

    access {
        defaultPermissions = [
            @for(permission <- janusData.access.defaultPermissions){
                @permissionReference(permission),
            }
        ]

        acl {
            @for((user, permissions) <- janusData.access.userAccess){
                "@user" = [
                    @for(permission <- permissions){
                        @permissionReference(permission),
                    }
                ]
            }
        }
    }

    admin {
        acl {
            @for((user, permissions) <- janusData.admin.userAccess){
                "@user" = [
                    @for(permission <- permissions){
                        @permissionReference(permission),
                    }
                ]
            }
        }
    }

    permissions = [
        @for(permission <- allPermissions){
            {
                account = "@permission.account.authConfigKey"
                label = "@permission.label"
                description = "@permission.description"
                shortTerm = @if(permission.shortTerm) {true} else {false}
                @permission.policy match {
                    case Some(policy) => {
                policy = """@policy"""
                    }
                    case None => {}
                }
                @permission.managedPolicyArns match {
                    case Some(managedPolicyArns) => {
                managedPolicyArns = [
                    @for(arn <- managedPolicyArns) {
                    """@arn""",
                    }
                ]
                    }
                    case None => {}
                }
            },
        }
    ]
}