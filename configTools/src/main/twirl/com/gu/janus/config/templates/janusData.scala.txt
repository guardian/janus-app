@import com.gu.janus.model.{JanusData, Permission, SessionType, Role, ACLEntry}

@(janusData: JanusData, allPermissions: Set[Permission], allRoles: Set[Role])

janus {
    @janusData.permissionsRepo.map { repoUrl =>
        permissionsRepo = "@repoUrl"
    }

    accounts = [
        @for(account <- janusData.accounts){
            { name = "@account.name", key = "@account.authConfigKey" },
        }
    ]

    support {
        supportAccess = [
            @for(permission <- janusData.support.supportAccess){
                @permissionReference(permission),
            }
        ]

        rota = [
            @for((startTime, (user1, user2)) <- janusData.support.rota){
                {
                    startTime = "@startTime"
                    supporting = [ "@user1", "@user2" ]
                },
            }
        ]

        period = @janusData.support.supportPeriod.getSeconds
    }

    access {
        defaultPermissions = [
            @for(permission <- janusData.access.defaultPermissions){
                @permissionReference(permission),
            }
        ]

        acl {
            @for((user, ACLEntry(permissions, roles)) <- janusData.access.userAccess){
                "@user" = {
                    permissions = [
                        @for(permission <- permissions){
                            @permissionReference(permission),
                        }
                    ],
                    roles = [
                        @for(role <- roles){
                            @roleReference(role),
                        }
                    ]
                }
            }
        }
    }

    admin {
        acl {
            @for((user, ACLEntry(permissions, _)) <- janusData.admin.userAccess){
                "@user" = {
                    permissions = [
                        @for(permission <- permissions){
                            @permissionReference(permission),
                        }
                    ],
                    roles = []
                }
            }
        }
    }

    permissions = [
        @for(permission <- allPermissions){
            {
                account = "@permission.account.authConfigKey"
                label = "@permission.label"
                description = "@permission.description"
                shortTerm = @if(permission.shortTerm) {true} else {false}
                @permission.policy match {
                    case Some(policy) => {
                policy = """@policy"""
                    }
                    case None => {}
                }
                @permission.managedPolicyArns match {
                    case Some(managedPolicyArns) => {
                managedPolicyArns = [
                    @for(arn <- managedPolicyArns) {
                    """@arn""",
                    }
                ]
                    }
                    case None => {}
                }
                sessionType = @permission.sessionType match {
                    case SessionType.User => {"user"}
                    case SessionType.Workload => {"workload"}
                }
            },
        }
    ]

    roles = [
        @for(role <- allRoles){
            {
                name = """@role.name""",
                permissions = [
                    @for(rolePermission <- role.permissions){
                        @permissionReference(rolePermission),
                    }
                ]
            }
        }
    ]
}