janus {
  permissionsRepo = "https://example.com/"

  accounts = [
    { name = "Main account", key = "main-account" },
    { name = "Website account", key = "website" },
    { name = "Testing account", key = "aws-test-account"  }
  ]

  support {
    supportAccess = [
      { account = "website", label = "developer" },
      { account = "aws-test-account", label = "developer" }
    ]

    rota = [
      {
        startTime = "2018-12-27T11:00:00.000Z"
        supporting = [ employee1, employee2 ]
      },
      {
        startTime = "2019-01-03T11:00:00.000Z"
        supporting = [ employee2, employee4 ]
      },
      {
        startTime = "2019-01-10T11:00:00.000Z"
        supporting = [ employee2, employee5 ]
      }
    ]

    period = 604800
  }

  access {
    # granted to all users that appear in the ACL
    defaultPermissions = [
      { account = "aws-test-account", label = "default-test" }
    ]

    acl {
      employee1 = {
        permissions = [
          { account = "website", label = "developer" }
        ],
        roles = [
          { name =  "Web data manager"}
        ]
      }
      employee2 = {
        permissions = [
          { account = "website", label = "developer" }
          { account = "website", label = "web-workload" }
        ],
        roles = []
      }
      employee3 = {
        permissions = [
          { account = "website", label = "s3-manager" },
          { account = "aws-test-account", label = "hybrid-permission" }
        ],
        roles = []
      }
      employee4 = {
        permissions = [
          { account = "website", label = "s3-manager" },
          { account = "aws-test-account", label = "developer" }
        ],
        roles = []
      }
    }
  }

  admin {
    acl {
      employee1 = {
          permissions = [
            { account = "website", label = "admin" }
          ],
          roles = [
            { name =  "Website administrator"}
          ]
      }
    }
  }

  permissions = [
    {
        account = "main-account"
        label = "test-permission"
        description = "A test permission"
        shortTerm = true
        policy = """{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["sts:GetCallerIdentity"],"Resource":["*"]}]}"""
        sessionType = "user"
    },
    {
        account = "aws-test-account"
        label = "default-test"
        description = "Default test access"
        shortTerm = false
        managedPolicyArns = ["""arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess""", """arn:aws:iam::aws:policy/EC2InstanceConnect"""]
        sessionType = "user"
    },
    {
        account = "website"
        label = "developer"
        description = "Developer access"
        shortTerm = false
        policy = """{"Version":"2012-10-17","Statement":[{"Sid":"1","Effect":"Allow","Action":["s3:*"],"Resource":["*"]}]}"""
        sessionType = "user"
    },
    {
        account = "website"
        label = "web-workload"
        description = "Service permission for the website"
        shortTerm = false
        policy = """{"Version":"2012-10-17","Statement":[{"Sid":"1","Effect":"Allow","Action":["s3:*"],"Resource":["*"]}]}"""
        sessionType = "workload"
    },
    {
        account = "website"
        label = "s3-manager"
        description = "Read and write access to S3"
        shortTerm = false
        managedPolicyArns = ["""arn:aws:iam::aws:policy/AmazonS3FullAccess"""]
        # no session type to test backwards compatibility
    },
    {
        account = "website"
        label = "admin"
        description = "Account admin"
        shortTerm = true
        policy = """{"Version":"2012-10-17","Statement":[{"Sid":"1","Effect":"Allow","Action":["s3:*"],"Resource":["*"]}]}"""
        managedPolicyArns = [
            """arn:aws:iam::aws:policy/ReadOnlyAccess"""
        ]
        sessionType = "user"
    },
    {
        account = "aws-test-account"
        label = "developer"
        description = "Developer access"
        shortTerm = false
        policy = """{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["sts:GetCallerIdentity"],"Resource":["*"]}]}"""
        sessionType = "user"
    },
    {
        account = "aws-test-account"
        label = "hybrid-permission"
        description = "Managed and inline access control"
        shortTerm = false
        policy = """{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["sts:GetCallerIdentity"],"Resource":["*"]}]}"""
        managedPolicyArns = [
            """arn:aws:iam::aws:policy/ReadOnlyAccess"""
        ]
        sessionType = "user"
    }
  ]

  roles = [
    {
        name = "Web data manager"
        permissions = [
            { account = "website", label = "s3-manager" },
        ]
    },
    {
      name = "Website administrator"
      permissions = [
        { account = "website", label = "admin" }
      ]
    }
  ]
}
